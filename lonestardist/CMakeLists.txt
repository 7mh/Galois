# NOTE: this is required because 
# target_link_libraries() does not work with cuda_add_library() 
# (in old versions of CMake)
include_directories(${CMAKE_SOURCE_DIR}/libgluon/include)

add_library(distbench STATIC src/DistBenchStart.cpp src/DistributedGraphLoader.cpp)
target_include_directories(distbench PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}/include
)

target_link_libraries(distbench galois_cusp galois_gluon)

if(ENABLE_HETERO_GALOIS)
  # turn on cuda for distbench as well
  target_compile_definitions(distbench PRIVATE __GALOIS_HET_CUDA__=1)

  # for debugging
  add_definitions(-D__GALOIS_CUDA_CHECK_ERROR__)
  if(CMAKE_BUILD_TYPE MATCHES "Debug")
    set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS}; -lineinfo)

    add_definitions(-D__GALOIS_DEBUG_WORKLIST__)
  endif()
endif()

# CuSP uses DGAccumulator which uses LCI if enabled
if (USE_LCI)
  target_include_directories(distbench PUBLIC ${LWCI_INCLUDE})
endif()

function(distApp name)
  FILE(GLOB CPPSOURCES ${name}*.cpp)
  app(${name} ${CPPSOURCES} DISTSAFE)
  target_link_libraries(${name} distbench)
  if(REPORT_PER_ROUND_STATS)
    target_compile_definitions(${name} PRIVATE DIST_PER_ROUND_TIMER=1)
  endif()
  if(REPORT_COMM_STATS)
    target_compile_definitions(${name} PRIVATE MORE_COMM_STATS=1)
  endif()
  if(USE_BARE_MPI)
    target_compile_definitions(${name} PRIVATE __GALOIS_BARE_MPI_COMMUNICATION__=1)
  endif()

  if(ENABLE_HETERO_GALOIS)
    target_compile_definitions(${name} PRIVATE __GALOIS_HET_CUDA__=1)
    target_link_libraries(${name} ${name}_cuda)

    FILE(GLOB CUSOURCES ${name}*.cu)
    cuda_add_library(${name}_cuda ${CUSOURCES})
    target_link_libraries(${name}_cuda galois_gpu)
  endif()
endfunction()

function(distAppNoGPU name)
  FILE(GLOB CPPSOURCES ${name}*.cpp)
  app(${name} ${CPPSOURCES} DISTSAFE)
  target_link_libraries(${name} distbench)
  if(USE_BARE_MPI)
    target_compile_definitions(${name} PRIVATE __GALOIS_BARE_MPI_COMMUNICATION__=1)
  endif()
endfunction()

function(testDist app type part N np)
  math(EXPR t "(${N} / ${np})")
  add_test(test-${app}-${type}-${part}-${np} mpiexec -n=${np} ./${app}  ${ARGN} -t=${t} -partition=${part})
  set_tests_properties(test-${app}-${type}-${part}-${np} PROPERTIES ENVIRONMENT GALOIS_DO_NOT_BIND_THREADS=1)
endfunction(testDist)

function(testDistPartition app type part)
  if(NUM_TEST_THREADS)
    set(N ${NUM_TEST_THREADS})
  else()
    cmake_host_system_information(RESULT N QUERY NUMBER_OF_PHYSICAL_CORES)
  endif()
  if (N EQUAL 0)
    set(N 1)
  endif()
  if (N LESS 8)
    foreach(np RANGE 1 ${N})
      testDist(${app} ${type} ${part} ${N} ${np} ${ARGN})
    endforeach(np)
  else()
    foreach(div RANGE 1 4)
      math(EXPR np "(${N} * ${div})/ 4")
      if ((div EQUAL 1) AND NOT (np EQUAL 1))
        testDist(${app} ${type} ${part} ${N} 1 ${ARGN})
      endif()
      testDist(${app} ${type} ${part} ${N} ${np} ${ARGN})
    endforeach(div)
  endif()
endfunction(testDistPartition)

function(testDistExec app type)
  testDistPartition(${app} ${type} oec ${ARGN})
  testDistPartition(${app} ${type} iec ${ARGN})
  testDistPartition(${app} ${type} cvc ${ARGN})
  testDistPartition(${app} ${type} cvc-iec ${ARGN})
  testDistPartition(${app} ${type} hovc ${ARGN})
  testDistPartition(${app} ${type} hivc ${ARGN})
endfunction(testDistExec)

function(testDistSyncOnlyApp app type)
  testDistExec(${app} ${type} ${ARGN})
endfunction(testDistSyncOnlyApp)

function(testDistApp app type)
  testDistExec(${app} sync-${type} ${ARGN} -exec=Sync)
  testDistExec(${app} async-${type} ${ARGN} -exec=Async)
endfunction(testDistApp)

add_subdirectory(bc)
add_subdirectory(bfs)
add_subdirectory(cc)
add_subdirectory(kcore)
add_subdirectory(pagerank)
add_subdirectory(sgd)
add_subdirectory(sssp)

add_subdirectory(partition)
