version: 2

# TODO: These builds are currently configured to
# install the needed dependencies in each container
# at the start of each build. The dependencies aren't huge,
# but that is slower and does waste some bandwidth.
# We should eventually roll the set up for each
# container into a separate dockerfile and push custom
# build images to dockerhub so that setting up packages
# during the actual CI testing is no longer necessary.

jobs:
  "Debian":
    docker:
      - image: debian:10
    steps:
      - checkout
      - run: |
          apt-get -q update -y
          apt-get -q install -y libboost-iostreams-dev libboost-serialization-dev libeigen3-dev cmake gcc g++ zlib1g-dev libmpich-dev mpich
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DNUM_TEST_THREADS=2 -DENABLE_DIST_GALOIS=ON ..
          make input
          make -j2
          make test || :
  "Ubuntu-18.04":
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: |
          apt-get -q update -y
          apt-get -q install -y apt-transport-https ca-certificates gnupg software-properties-common wget
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -
          apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
          apt-get -q update -y

          apt-get -q install -y libboost-all-dev libeigen3-dev cmake gcc g++ libopenmpi-dev openmpi-bin

          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DNUM_TEST_THREADS=2 -DENABLE_DIST_GALOIS=ON ..
          make input
          make -j2
          make test || :
  "CentOS-8-gcc":
    docker:
      - image: centos:8
    steps:
      - checkout
      - run: |
          # Needs to access PowerTools packages for eigen, so get access to those
          yum -y -q install dnf-plugins-core
          yum -y -q config-manager --set-enabled PowerTools
          yum -y -q install zlib-devel make gcc gcc-c++ boost-devel cmake eigen3-devel mpich-devel wget

          wget -O - https://github.com/Kitware/CMake/releases/download/v3.17.0/cmake-3.17.0-Linux-x86_64.tar.gz | tar -xz -f - -C /usr/local
          ln -s /usr/local/cmake-3.17.0-Linux-x86_64/bin/cmake /usr/local/bin/cmake

          # Make the "module" command work in this shell session.
          source /etc/profile.d/modules.sh
          module load mpi

          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DNUM_TEST_THREADS=2 -DENABLE_DIST_GALOIS=ON ..
          make input
          make -j2
          make test || :
  "CentOS-8-clang":
    docker:
      - image: centos:8
    steps:
      - checkout
      - run: |
          # Needs to access PowerTools packages for eigen, so get access to those
          yum -y -q install dnf-plugins-core
          yum -y -q config-manager --set-enabled PowerTools
          yum -y -q install zlib-devel make boost-devel cmake eigen3-devel openmpi-devel wget
          yum module -y -q install llvm-toolset

          wget -O - https://github.com/Kitware/CMake/releases/download/v3.17.0/cmake-3.17.0-Linux-x86_64.tar.gz | tar -xz -f - -C /usr/local
          ln -s /usr/local/cmake-3.17.0-Linux-x86_64/bin/cmake /usr/local/bin/cmake

          # Make the "module" command work in this shell session.
          source /etc/profile.d/modules.sh
          module load mpi

          mkdir build
          cd build
          cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DNUM_TEST_THREADS=2 -DENABLE_DIST_GALOIS=ON ..
          make input
          make -j2
          make test || :
  "CentOS-8-clang-libc++":
    docker:
      - image: centos:8
    steps:
      - checkout
      - run: |
          # Note: gcc required to get libgcc and glibc-devel even though we're using clang.
          yum -y -q install zlib-devel make wget bzip2 gcc

          # Use miniconda to get all remaining needed packages
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          rm miniconda.sh
          export PATH=$HOME/miniconda/bin:$PATH
          source activate
          conda install --update-specs -y -q -c conda-forge make cmake>=3.13 boost-cpp clangdev=9 llvmdev=9 llvm-meta=9 libcxx=9 libcxxabi=9 zlib eigen openmpi
          mkdir build
          cd build
          # Dist Galois currently doesn't build when llvm headers are installed, so don't include it in this build.
          cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-Wl,-rpath=$HOME/miniconda/lib -std=c++17 -L$CONDA_PREFIX/lib -lc++ -lc++abi" -DCMAKE_SYSTEM_PREFIX_PATH="$CONDA_PREFIX" -DCMAKE_BUILD_TYPE=Release -DNUM_TEST_THREADS=2 ..
          make input
          make -j2
          make test || :
  "Arch":
    docker:
      - image: archlinux/base
    steps:
      - checkout
      - run: |
          pacman -Sy
          pacman -q -S --noconfirm gcc make cmake boost eigen openmpi
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DNUM_TEST_THREADS=2 -DENABLE_DIST_GALOIS=ON ..
          make input
          make -j2
          make test || :
  "Alpine":
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: |
          apk add --no-cache --no-progress gcc musl-dev g++ make cmake boost-dev zlib-dev eigen
          mkdir build
          cd build
          # Make sure we can build with ENABLE_DIST not set to ON.
          cmake -DCMAKE_BUILD_TYPE=Release -DNUM_TEST_THREADS=2 ..
          make input
          make -j4
          make test || :


          mkdir build
  "Fedora-gcc":
    docker:
      - image: fedora:latest
    steps:
      - checkout
      - run: |
          yum -y -q install zlib-devel boost-devel make cmake gcc-c++ eigen3-devel mpich-devel
          # Get the "module" function set up before loading MPI.
          . /etc/bashrc
          module load mpi
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DNUM_TEST_THREADS=2 -DENABLE_DIST_GALOIS=ON ..
          make input
          make -j2
          make test || :
  "Fedora-clang":
    docker:
      - image: fedora:latest
    steps:
      - checkout
      - run: |
          # Install llvm-devel, not because it is required, but because it may
          # conflict with the llvm headers that are vendored for use when building
          # command line programs. That configuration needs to be tested.
          yum -y -q install zlib-devel boost-devel make cmake clang llvm-devel eigen3-devel openmpi-devel
          # Get the "module" function set up before loading MPI.
          . /etc/bashrc
          module load mpi
          mkdir build
          cd build
          cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DNUM_TEST_THREADS=2 -DENABLE_DIST_GALOIS=ON ..
          make input
          make -j2
          make test || :
 
workflows:
  version: 2
  build:
    jobs:
      - "Debian"
      - "Ubuntu-18.04"
      - "CentOS-8-gcc"
      - "CentOS-8-clang"
      - "CentOS-8-clang-libc++"
      - "Arch"
      - "Alpine"
      - "Fedora-gcc"
      - "Fedora-clang"
